// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.EventStream = (function(_super) {

    __extends(EventStream, _super);

    function EventStream(origin, event) {
      var _this = this;
      this.origin = origin;
      this.event = event;
      this.origin.bind(this.event, function(value) {
        return _this.occur(value);
      });
    }

    EventStream.prototype.occur = function(value) {
      return this.trigger('occur', value);
    };

    EventStream.prototype.hook = function(func) {
      return this.bind('occur', function(value) {
        return func(value);
      });
    };

    EventStream.prototype.map = function(func) {
      var pusher;
      pusher = new Backbone.Event();
      this.hook(function(value) {
        return pusher.trigger('push', func(value));
      });
      return new Backbone.EventStream(pusher, 'push');
    };

    EventStream.prototype.filter = function(func) {
      var pusher;
      pusher = new Backbone.Event();
      this.hook(function(value) {
        if (func(value)) {
          return pusher.trigger('push', value);
        }
      });
      return new Backbone.EventStream(pusher, 'push');
    };

    EventStream.prototype.merge = function(event) {
      var pusher;
      pusher = new Backbone.Event();
      this.hook(function(value) {
        return pusher.trigger('push', value);
      });
      event.hook(function(value) {
        return pusher.trigger('push', value);
      });
      return new Backbone.EventStream(pusher, 'push');
    };

    return EventStream;

  })(Backbone.Event);

}).call(this);
